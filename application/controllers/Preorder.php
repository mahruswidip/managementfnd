<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Preorder extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Preorder_model');
        $this->load->model('Product_model');
        $this->load->model('Invoice_model');
    }

    /*
     * Listing of preorder
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE;
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('preorder/index?');
        $config['total_rows'] = $this->Preorder_model->get_all_preorder_count();
        $this->pagination->initialize($config);

        $user_level = $this->session->userdata('user_level');
        $user_id = $this->session->userdata('user_id');

        $data['preorder'] = $this->Preorder_model->get_all_preorder($params);

        // echo '<pre>';
        // print_r($data['preorder']);
        // exit();

        $data['_view'] = 'preorder/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new preorder
     */

    function add()
    {
        $data['products'] = $this->Product_model->get_all_product();
        if (isset($_POST) && count($_POST) > 0) {
            $params = array(
                'po_number' => $this->input->post('po_number'),
                'supplier' => $this->input->post('supplier'),
                'fk_id_product' => $this->input->post('fk_id_product'),
                'total_po_qty' => $this->input->post('total_po_qty'),
            );

            $id_preorder = $this->Preorder_model->add_preorder($params);
            redirect('preorder/index');
        } else {
            $data['_view'] = 'preorder/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a preorder
     */

    function edit($id)
    {
        $config['upload_path'] = './assets/images/preorder/'; //path folder
        $config['allowed_types'] = 'gif|jpg|png|jpeg|bmp'; //type yang dapat diakses bisa anda sesuaikan
        $config['encrypt_name'] = TRUE; //nama yang terupload nantinya
        $user_id = $this->session->userdata('user_id');

        $isi_preorder = $this->input->post('konten');

        $this->upload->initialize($config);

        // Check if the form is submitted
        if ($this->input->server('REQUEST_METHOD') == 'POST') {
            if (!empty($_FILES['preorder_img']['name'])) {
                if ($this->upload->do_upload('preorder_img')) {
                    // Delete existing image if any
                    $existing_preorder = $this->Preorder_model->get_preorder($id);
                    $existing_image_path = './assets/images/preorder/' . $existing_preorder['preorder_img'];
                    if (file_exists($existing_image_path)) {
                        unlink($existing_image_path);
                    }

                    $gbr = $this->upload->data();

                    // Compress Image
                    $config['image_library'] = 'gd2';
                    $config['source_image'] = './assets/images/preorder/' . $gbr['file_name'];
                    $config['create_thumb'] = FALSE;
                    $config['maintain_ratio'] = FALSE;
                    $config['quality'] = '60%';
                    $config['width'] = '20%';
                    $config['max_size'] = '5000';
                    $config['new_image'] = './assets/images/preorder/' . $gbr['file_name'];
                    $this->load->library('image_lib', $config);
                    $this->image_lib->resize();
                    $gambar = $gbr['file_name'];
                } else {
                    echo "else";
                    exit();
                    redirect('preorder/index');
                }
            } else {
                // No new image uploaded, use the existing one
                $gambar = $this->input->post('preorder_img');
            }

            $params = array(
                'kategori' => $this->input->post('kategori'),
                'travel' => $this->input->post('travel'),
                'konten' => $isi_preorder,
                'preorder_img' => $gambar,
                'judul_preorder' => $this->input->post('judul_preorder'),
            );

            // var_dump($params);
            // exit();

            $this->Preorder_model->edit_preorder($id, $params);
            redirect('preorder/index');
        } else {
            // If it's not a POST request, load the edit form
            $data['preorder'] = $this->Preorder_model->get_preorder($id);
            $data['_view'] = 'preorder/edit';
            $this->load->view('layouts/main', $data);
        }
    }

    function detail($id_preorder)
    {
        $data['preorder'] = $this->Preorder_model->get_preorder_by_id($id_preorder);
        // $data['invoice'] = $this->Invoice_model->get_invoice($id_invoice);
        // echo '<pre>';
        // var_dump($data['record']);
        // exit();
        $data['_view'] = 'preorder/detail';
        $this->load->view('layouts/main', $data);
    }


    public function view()
    {
        // Ambil parameter po_number dari request
        $po_number = $this->input->post('po_number');

        // Ambil semua preorder yang sesuai dengan po_number
        if (!empty($po_number)) {
            $preorders = $this->Preorder_model->get_preorder_by_po_number($po_number);
        } else {
            $preorders = $this->Preorder_model->get_all_preorder();
        }

        // Ambil semua produk
        $products = $this->Product_model->get_all_product();

        // Buat array associative untuk product ID ke product name
        $product_names = [];
        foreach ($products as $product) {
            $product_names[$product['id_product']] = $product['product'];
        }

        // Tambahkan nama produk ke setiap preorder
        foreach ($preorders as &$preorder) {
            $preorder['fk_id_product'] = isset($product_names[$preorder['fk_id_product']]) ? $product_names[$preorder['fk_id_product']] : 'Unknown';
        }

        echo json_encode($preorders);
    }



    /*
     * Deleting preorder
     */
    function remove($id_preorder)
    {
        $preorder = $this->Preorder_model->get_preorder($id_preorder);

        $this->Preorder_model->delete_preorder($id_preorder);
        unlink(FCPATH . 'assets/images/preorder/' . $preorder['preorder_img']);
        redirect('preorder/index');
    }
}