<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Invoice extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Invoice_model');
        $this->load->model('Product_model');
        $this->load->model('Purchaseorder_model');
        $this->load->model('Shipment_model');
    }

    /*
     * Listing of invoice
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE;
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('invoice/index?');
        $config['total_rows'] = $this->Invoice_model->get_all_invoice_count();
        $this->pagination->initialize($config);

        $user_level = $this->session->userdata('user_level');
        $user_id = $this->session->userdata('user_id');

        $data['invoice'] = $this->Invoice_model->get_all_invoice($params);

        // echo '<pre>';
        // print_r($data['invoice']);
        // exit();

        $data['_view'] = 'invoice/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new invoice
     */

    function add()
    {
        $data['purchaseorder'] = $this->Invoice_model->get_all_purchaseorder();
        if (isset($_POST) && count($_POST) > 0) {
            $params = array(
                'po_id' => $this->input->post('po_id'),
                'invoice_number' => $this->input->post('invoice_number'),
                'receipt_doc' => $this->input->post('receipt_doc'),
                'complete_doc' => $this->input->post('complete_doc'),
                'req_payment_date' => $this->input->post('req_payment_date'),
                'due_date' => $this->input->post('due_date'),
            );

            $id_invoice = $this->Invoice_model->add_invoice($params);
            redirect('invoice/index');
        } else {
            $data['_view'] = 'invoice/add';
            $this->load->view('layouts/main', $data);
        }
    }

    function add_shipment() {
        $shipment_id = $this->input->post('shipment_id');
    
        $params = array(
            'invoice_id' => $this->input->post('invoice_id'),
            'shipment_number' => $this->input->post('shipment_number'),
            'vehicle_number' => $this->input->post('vehicle_number'),
            'collie' => $this->input->post('collie'),
            'netto' => $this->input->post('netto'),
        );
    
        if(empty($shipment_id)) {
            $this->Shipment_model->add_shipment($params);
        } else {
            $this->Shipment_model->update_shipment($shipment_id, $params);
        }
    }
    

    /*
     * Editing a invoice
     */

    function edit($id)
    {
        $config['upload_path'] = './assets/images/invoice/'; //path folder
        $config['allowed_types'] = 'gif|jpg|png|jpeg|bmp'; //type yang dapat diakses bisa anda sesuaikan
        $config['encrypt_name'] = TRUE; //nama yang terupload nantinya
        $user_id = $this->session->userdata('user_id');

        $isi_invoice = $this->input->post('konten');

        $this->upload->initialize($config);

        // Check if the form is submitted
        if ($this->input->server('REQUEST_METHOD') == 'POST') {
            if (!empty($_FILES['invoice_img']['name'])) {
                if ($this->upload->do_upload('invoice_img')) {
                    // Delete existing image if any
                    $existing_invoice = $this->Invoice_model->get_invoice($id);
                    $existing_image_path = './assets/images/invoice/' . $existing_invoice['invoice_img'];
                    if (file_exists($existing_image_path)) {
                        unlink($existing_image_path);
                    }

                    $gbr = $this->upload->data();

                    // Compress Image
                    $config['image_library'] = 'gd2';
                    $config['source_image'] = './assets/images/invoice/' . $gbr['file_name'];
                    $config['create_thumb'] = FALSE;
                    $config['maintain_ratio'] = FALSE;
                    $config['quality'] = '60%';
                    $config['width'] = '20%';
                    $config['max_size'] = '5000';
                    $config['new_image'] = './assets/images/invoice/' . $gbr['file_name'];
                    $this->load->library('image_lib', $config);
                    $this->image_lib->resize();
                    $gambar = $gbr['file_name'];
                } else {
                    echo "else";
                    exit();
                    redirect('invoice/index');
                }
            } else {
                // No new image uploaded, use the existing one
                $gambar = $this->input->post('invoice_img');
            }

            $params = array(
                'kategori' => $this->input->post('kategori'),
                'travel' => $this->input->post('travel'),
                'konten' => $isi_invoice,
                'invoice_img' => $gambar,
                'judul_invoice' => $this->input->post('judul_invoice'),
            );

            // var_dump($params);
            // exit();

            $this->Invoice_model->edit_invoice($id, $params);
            redirect('invoice/index');
        } else {
            // If it's not a POST request, load the edit form
            $data['invoice'] = $this->Invoice_model->get_invoice($id);
            $data['_view'] = 'invoice/edit';
            $this->load->view('layouts/main', $data);
        }
    }

    public function get_purchase_orders()
    {
        $this->load->model('Purchaseorder_model');
        $purchase_orders = $this->Purchaseorder_model->get_all_purchase_orders();
        echo json_encode($purchase_orders);
    }

    function detail($invoice_id)
    {
        $data['invoice'] = $this->Invoice_model->get_invoice_detail($invoice_id);
        $data['_view'] = 'invoice/detail';
        $this->load->view('layouts/main', $data);
    }


    function checklist($invoice_id) {
        $data['invoice'] = $this->Invoice_model->get_invoice_detail($invoice_id);

        // Ambil shipment lain berdasarkan nomor PO yang sama
        $data['other_shipments'] = $this->Shipment_model->get_shipments_by_po_number($data['invoice']['po_number'], $invoice_id);
    
        // Ambil po_number dari data invoice
        $po_number = $data['invoice']['po_number'];
    
        // Dapatkan TOTAL PO QTY
        $data['total_po_qty'] = $this->Invoice_model->get_total_po_qty($po_number);
    
        $data['shipment'] = $this->Shipment_model->get_shipments_by_invoice($invoice_id);
        $data['_view'] = 'invoice/checklist';
        $this->load->view('layouts/main', $data);
    }   
     


    public function view()
    {
        $invoice = $this->Invoice_model->get_all_invoice();

        echo json_encode($invoice);
    }

    public function view_shipment_by_invoice() {
        $invoice_id = $this->input->post('invoice_id'); 
        $shipments = $this->Shipment_model->get_shipments_by_invoice($invoice_id);
    
        echo json_encode($shipments);
    }



    /*
     * Deleting invoice
     */
    function remove($id_invoice)
    {
        $invoice = $this->Invoice_model->get_invoice($id_invoice);

        $this->Invoice_model->delete_invoice($id_invoice);
        unlink(FCPATH . 'assets/images/invoice/' . $invoice['invoice_img']);
        redirect('invoice/index');
    }
}